/*******************************************************************************
 * Project Key : fundpay
 * Create on Mar 13, 2013 9:59:27 AM
 * Copyright (c) 2008 - 2011.深圳市快付通金融网络科技服务有限公司版权所有. 粤ICP备10228891号
 * 注意：本内容仅限于深圳市快付通金融网络科技服务有限公司内部传阅，禁止外泄以及用于其他的商业目的
 ******************************************************************************/
package com.rda.plugin.mybatis;

import java.util.List;

import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;

/**
 * <P>生成返回单条记录的selectByModel方法和mapper,返回多条的参见SelectByModelWithPagingSelective</P>
 * @author lianrao
 */
public class SelectByModelSelectivePlugin extends MyBatisPlugin{

	private final String methodName = "selectByModelSelective";

	/* (non-Javadoc)
	 * @see org.mybatis.generator.api.Plugin#validate(java.util.List)
	 * @author lianrao
	 */
	public boolean validate(List<String> warnings) {
		return true;
	}
	

	/**
	 *生成方法:public List<Model> selectByModelSelective(@Param("cond")Model cond ,@Param("strict") boolean strict); 
	 */
	@Override
	public boolean clientGenerated(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
		genMethod(interfaze, topLevelClass, introspectedTable);
		return true;
	}
	

	

	@Override
	public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
		genMapperSql(document, introspectedTable);
		return true;
	}
	
	/**
	 * 
	 * <p>生成selectByModelSelective方法</p>
	 * @param interfaze
	 * @param topLevelClass
	 * @param introspectedTable
	 * @author lianrao
	 */
	private void genMethod(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable){
		String modelName = introspectedTable.getTableConfiguration().getDomainObjectName();
		Method method = new Method(this.methodName);
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(new FullyQualifiedJavaType(modelName));
		Parameter parameter = new Parameter(new FullyQualifiedJavaType(modelName), "cond", "@Param(\"cond\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.boolean"), "strict", "@Param(\"strict\")");
		method.addParameter(parameter);
		//		context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
		genMethodComment(method, introspectedTable);
		interfaze.addMethod(method);
	}
	
	


	private void genMethodComment(Method method, IntrospectedTable introspectedTable) {

		method.addJavaDocLine("/**"); //$NON-NLS-1$
		method.addJavaDocLine(" * 此方法返回满足条件的单条记录.<br/>");
		method.addJavaDocLine(" * 此返回条件判断其值不为 null且不为空'';<br/>");
		method.addJavaDocLine(" * 若strict为true则精确匹配所有值,若为false则模糊匹配所有类型为String的值;<br/>");
		method.addJavaDocLine(" * 注意：java的Date不能完成匹配Oracle Date类型，即insert date into table 然后使用同一值date select是取不到对应记录的.<br/>");
		method.addJavaDocLine(" * ");
		method.addJavaDocLine(" * This method was generated by MyBatis Generator.<br/>"); //$NON-NLS-1$

		StringBuilder sb = new StringBuilder();
		sb.append(" * This method corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		method.addJavaDocLine(sb.toString());

		addJavadocTag(method, false);

		method.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	

	
	/**
	 * 
	 * <p>生成selectByModelWithPaging Sql</p>
	 * @param document
	 * @param introspectedTable
	 * @author lianrao
	 */
	private void genMapperSql(Document document, IntrospectedTable introspectedTable) {
		XmlElement element = new XmlElement("select");
		Attribute attribute = new Attribute("id", this.methodName);
		element.addAttribute(attribute);
		attribute = new Attribute("parameterType", "map");
		element.addAttribute(attribute);
		attribute = new Attribute("resultMap", "BaseResultMap");
		element.addAttribute(attribute);
		context.getCommentGenerator().addComment(element);

		StringBuilder sb = new StringBuilder();
		int level1 = 1;
		int level2 = 2;
		int level3 = 3;
		int level4 = 4;
		int level5 = 5;

		sb.append("select <include refid=\"" + BASE_COLUMN_LIST + "\" /> \n");
		sb.append(indent(level2)).append("from ").append(introspectedTable.getFullyQualifiedTableNameAtRuntime() + "\n");
		sb.append(indent(level2) + "<where>\n");
		sb.append(indent(level3) + "<include refid=\"" + DYNAMIC_SQL_ID + "\" />\n");
		sb.append(indent(level2) + "</where>");
		TextElement text = new TextElement(sb.toString());
		element.addElement(text);

		document.getRootElement().addElement(element);
	}



}
