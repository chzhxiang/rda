/*******************************************************************************
 * Project Key : fundpay
 * Create on Mar 5, 2013 2:21:47 PM
 * Copyright (c) 2008 - 2011.深圳市快付通金融网络科技服务有限公司版权所有. 粤ICP备10228891号
 * 注意：本内容仅限于深圳市快付通金融网络科技服务有限公司内部传阅，禁止外泄以及用于其他的商业目的
 ******************************************************************************/
package com.rda.plugin.mybatis;

import java.util.List;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;


/**
 * <P>根据表字段生成动态条件语句,例如:<br/>
 * &lt;sql id="dynamicModelSql" &gt; <br/>
    &lt;!-- <br/>
      WARNING - @mbggenerated	<br/>
      This element is automatically generated by MyBatis Generator, do not modify. <br/>
      This element was generated on Wed Feb 27 09:01:56 CST 2013. <br/>
    --&gt;	<br/>
    	&lt;if test="cond!=null"&gt; <br/>
			&lt;if test="cond.id!=null"&gt; <br/>
				and ID =  #{cond.id, jdbcType=DECIMAL} <br/>
			&lt;/if&gt;	<br/>
			&lt;if test="cond.teamId!=null"&gt; <br/>
				and TEAM_ID =  #{cond.teamId, jdbcType=DECIMAL} <br/>
			&lt;/if&gt; <br/>
			&lt;if test="cond.systemId!=null"&gt; <br/>
				and SYSTEM_ID =  #{cond.systemId, jdbcType=DECIMAL} <br/>
			&lt;/if&gt;	<br/>
			&lt;if test="cond.createdTime!=null"&gt; <br/>
				and CREATED_TIME =  #{cond.createdTime, jdbcType=TIMESTAMP} <br/>
			&lt;/if&gt;<br/>
		&lt;/if&gt;<br/>
  &lt;/sql&gt;<br/>
 * </P>
 * @author lianrao
 */
public class DynamicModelSqlPlugin extends MyBatisPlugin {

	/**
	 * 生成的dynamicSql中是否检查变量是否为空字符串即是否等于''
	 */
	private boolean checkEmptyString = true;

	/* (non-Javadoc)
	 * @see org.mybatis.generator.api.Plugin#validate(java.util.List)
	 * @author lianrao
	 */
	public boolean validate(List<String> warnings) {
		String prop = this.properties.getProperty("checkEmptyString");
		if (prop != null && "false".equalsIgnoreCase(prop)) {
			checkEmptyString = false;
		}

		return true;
	}

	@Override
	public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {

		genSqlWhereXml(document, introspectedTable);

		return true;
	}

	/**
	 * 
	 * <p>生成model dynamic where xml like :<br/>
	 * 	<sql id="dynamicWhere"><br/>
	 * 		<where><br/>
	 * 			<if test="col1!=null"><br/>
	 * 				col1 = #{col1,jdbcType=type}
	 * 			</if><br/>
	 * 		</where><br/>
	 * 	</sql>
	 * </p>
	 * @author lianrao
	 */
	private void genSqlWhereXml(Document document, IntrospectedTable introspectedTable) {
		XmlElement element = new XmlElement("sql");
		Attribute attr = new Attribute("id", DYNAMIC_SQL_ID);
		element.addAttribute(attr);
		context.getCommentGenerator().addComment(element);
		int level1 = 1;
		int level2 = 2;
		int level3 = 3;
		int level4 = 4;
		StringBuilder sb = new StringBuilder();
		sb.append(indent(level1) + "<if test=\"cond != null\">\n");
		for (IntrospectedColumn col : introspectedTable.getAllColumns()) {
			String modelProperty = col.getJavaProperty();
			sb.append(indent(level3) + "<if test=\"cond.");
			sb.append(modelProperty);
			sb.append(" != null");
			if (checkEmptyString) {
				if ("String".equalsIgnoreCase(col.getFullyQualifiedJavaType().getShortName())) {
					sb.append(" and cond.");
					sb.append(modelProperty).append(" != ''");
				}
			}
			sb.append("\">\n");
			sb.append(indent(level4) + "and ");
			sb.append(col.getActualColumnName());
			if ("String".equalsIgnoreCase(col.getFullyQualifiedJavaType().getShortName())) {
				sb.append(" <if test =\"!strict\"> like '%' ||</if>");
				sb.append("<if test =\"strict\"> = </if>");
			} else {
				sb.append(" = ");
			}
			sb.append("#{cond." + modelProperty + ", jdbcType=" + col.getJdbcTypeName() + "}");
			if ("String".equalsIgnoreCase(col.getFullyQualifiedJavaType().getShortName())) {
				sb.append("<if test =\"!strict\"> || '%' </if>");
			}
			sb.append("\n" + indent(level3) + "</if>\n");
		}
		sb.append(indent(level2) + "</if>");

		TextElement text = new TextElement(sb.toString());
		element.addElement(text);
		document.getRootElement().addElement(element);
	}

}
