/*******************************************************************************
 * Project Key : fundpay
 * Create on Jan 24, 2013 4:33:20 PM
 * Copyright (c) 2008 - 2011.深圳市快付通金融网络科技服务有限公司版权所有. 粤ICP备10228891号
 * 注意：本内容仅限于深圳市快付通金融网络科技服务有限公司内部传阅，禁止外泄以及用于其他的商业目的
 ******************************************************************************/
package com.rda.plugin.mybatis;

import static org.mybatis.generator.internal.util.StringUtility.stringHasValue;
import static org.mybatis.generator.internal.util.messages.Messages.getString;
import java.util.List;

import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;


/**
 * <P>在client生成selectModel方法和sqlmap定义,此plugin需要与annotationAndImportPlugin插件同时使用例如:<br/>
 * <b>XXXMapper.class</b> <br/>
 * 	class XXXMapper{<br/>
 * 	List<Model> selectModelWithPaging(@Param("cond")Model cond , @Param("start")Integer start , @Param("end")Integer end);<br/>
 * }<br/>
 * <b>XXX_SqlMap.xml</b><br/>
 * <mapper><br/>
 *
 * <select id="selectByModelWithPagingSelective" parameterType="map" resultMap="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Feb 27 09:01:56 CST 2013.
    -->
    select <include refid="Base_Column_List" /> from (
 		select <include refid="Base_Column_List" /> , rownum rnum 
		from T_RM_TEAM_SYSTEM_REL
		<where>
			<include refid="dynamicModelSql" />
			<if test="end !=null">
				and rownum  &lt; #{end,jdbcType=DECIMAL}
			</if> 
		</where> 
		) a
 	<where>
		<if test="start!=null">
			 rnum &gt;= #{start,jdbcType=DECIMAL} 
		</if>
	</where>
  </select>
 * </mapper>
 * </P>
 * 此plugin需要与DynamicModelSqlPlugin配合使用;<br/>
 * 因mysql与oracle分页语句不一致，增加db属性来区分针对不同数据库生成不同分页语句，暂只支持oracle与mysql;
 * @author lianrao
 */
public class SelectByModelWithPagingSelectivePlugin extends MyBatisPlugin{

	private final String methodName = "selectByModelWithPagingSelective";
	private String db = "oracle"  ;


	/* (non-Javadoc)
	 * @see org.mybatis.generator.api.Plugin#validate(java.util.List)
	 * @author lianrao
	 */
	public boolean validate(List<String> warnings) {
		db= this.properties.getProperty("db") != null ? this.properties.getProperty("db"):"oracle";
		
		return true;
	}

	/**
	 *生成方法:public List<Model> selectByModelWithPaging(@Param("cond")cond , @Param("start")Long start , @Param("end")Long end); 
	 */
	@Override
	public boolean clientGenerated(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
		genSelectByModelWithPagingSelectiveMethod(interfaze, topLevelClass, introspectedTable);
		return true;
	}
	

	

	@Override
	public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
		if("mysql".equalsIgnoreCase(db)){
			genSelectByModelWithPagingMysqlSql(document, introspectedTable);
		}else if("oracle".equalsIgnoreCase(db)){
			genSelectByModelWithPagingOracleSql(document, introspectedTable);
		}
		return true;
	}
	
	/**
	 * <p>生成Mysql类型的分页语句</p>
	 * <p>
	 * select columns from table where condition limit start , pageSize
	 * </p>
	 * @param document
	 * @param introspectedTable
	 * @author lianrao
	 */
	private void genSelectByModelWithPagingMysqlSql(Document document,
			IntrospectedTable introspectedTable) {
		XmlElement element = new XmlElement("select");
		Attribute attribute = new Attribute("id", this.methodName);
		element.addAttribute(attribute);
		attribute = new Attribute("parameterType", "map");
		element.addAttribute(attribute);
		attribute = new Attribute("resultMap", "BaseResultMap");
		element.addAttribute(attribute);
		context.getCommentGenerator().addComment(element);

		StringBuilder sb = new StringBuilder();
		int level2 = 2;
		int level3 = 3;

		sb.append("select <include refid=\"" + BASE_COLUMN_LIST + "\" /> from  ");
		sb.append(introspectedTable.getFullyQualifiedTableNameAtRuntime()).append("\n");
		sb.append(indent(level2) + "<where>\n");
		sb.append(indent(level3) + "<include refid=\"" + DYNAMIC_SQL_ID + "\" />\n");
		sb.append(indent(level2) + "</where> \n");
		sb.append(indent(level3) + " limit  #{start,jdbcType=DECIMAL}, #{pageSize,jdbcType=DECIMAL} \n");

		TextElement text = new TextElement(sb.toString());
		element.addElement(text);

		document.getRootElement().addElement(element);
		
	}

	/**
	 * 
	 * <p>生成selectByModelWithPagingSelective接口方法</p>
	 * @param interfaze
	 * @param topLevelClass
	 * @param introspectedTable
	 * @author lianrao
	 */
	private void genSelectByModelWithPagingSelectiveMethod(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable){
		String modelName = introspectedTable.getTableConfiguration().getDomainObjectName();
		Method method = null;
		
		if("mysql".equalsIgnoreCase(db)){
			method = genMysqlMapperMethod(modelName);
		}else if("oracle".equalsIgnoreCase(db)){
			method = genOracleMapperMethod(modelName);
		}
		//		context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
		genSelectByModelWithPagingSelectiveMethodComment(method, introspectedTable);
		interfaze.addMethod(method);
	}
	
	/**
	 * <p>生成mysql类型的mapper method</p>
	 * @param modelName
	 * @return
	 * @author lianrao
	 */
	private Method genMysqlMapperMethod(String modelName) {
		Method method = new Method(this.methodName);
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(new FullyQualifiedJavaType("List<" + modelName + ">"));
		Parameter parameter = new Parameter(new FullyQualifiedJavaType(modelName), "cond", "@Param(\"cond\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.Integer"), "start", "@Param(\"start\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.Integer"), "pageSize", "@Param(\"pageSize\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.boolean"), "strict", "@Param(\"strict\")");
		method.addParameter(parameter);
		
		return method;
	}

	/**
	 * 
	 * <p>生成oracle类型的mapper method</p>
	 * @param modelName
	 * @return
	 * @author lianrao
	 */
	private Method genOracleMapperMethod(String modelName){
		
		Method method = new Method(this.methodName);
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(new FullyQualifiedJavaType("List<" + modelName + ">"));
		Parameter parameter = new Parameter(new FullyQualifiedJavaType(modelName), "cond", "@Param(\"cond\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.Integer"), "start", "@Param(\"start\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.Integer"), "end", "@Param(\"end\")");
		method.addParameter(parameter);
		parameter = new Parameter(new FullyQualifiedJavaType("java.lang.boolean"), "strict", "@Param(\"strict\")");
		method.addParameter(parameter);
		
		return method;
	}
	
	


	private void genSelectByModelWithPagingSelectiveMethodComment(Method method, IntrospectedTable introspectedTable) {

		method.addJavaDocLine("/**"); //$NON-NLS-1$
		method.addJavaDocLine(" * 此方法返回记录为上不包含下包含即大于等于start,小于end;且如果start,end都为null则查询满足条件的所有记录.<br/>");
		method.addJavaDocLine(" * 此返回条件判断其值不为 null且不为空'';<br/>");
		method.addJavaDocLine(" * 若strict为true则精确匹配所有值,若为false则模糊匹配所有类型为String的值;<br/>");
		method.addJavaDocLine(" * 注意：java的Date不能完成匹配Oracle Date类型，即insert date into table 然后使用同一值date select是取不到对应记录的.<br/>");
		method.addJavaDocLine(" * ");
		method.addJavaDocLine(" * This method was generated by MyBatis Generator.<br/>"); //$NON-NLS-1$

		StringBuilder sb = new StringBuilder();
		sb.append(" * This method corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		method.addJavaDocLine(sb.toString());

		addJavadocTag(method, false);

		method.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	

	
	/**
	 * 
	 * <p>生成selectByModelWithPaging oracle类型的Sql</p>
	 * @param document
	 * @param introspectedTable
	 * @author lianrao
	 */
	private void genSelectByModelWithPagingOracleSql(Document document, IntrospectedTable introspectedTable) {
		XmlElement element = new XmlElement("select");
		Attribute attribute = new Attribute("id", this.methodName);
		element.addAttribute(attribute);
		attribute = new Attribute("parameterType", "map");
		element.addAttribute(attribute);
		attribute = new Attribute("resultMap", "BaseResultMap");
		element.addAttribute(attribute);
		context.getCommentGenerator().addComment(element);

		StringBuilder sb = new StringBuilder();
		int level1 = 1;
		int level2 = 2;
		int level3 = 3;
		int level4 = 4;
		int level5 = 5;

		sb.append("select <include refid=\"" + BASE_COLUMN_LIST + "\" /> from (\n ");
		sb.append(indent(level2) + "select <include refid=\"" + BASE_COLUMN_LIST + "\" /> , rownum rnum \n");
		sb.append(indent(level2) + "from " + introspectedTable.getFullyQualifiedTableNameAtRuntime() + "\n");
		sb.append(indent(level2) + "<where>\n");
		sb.append(indent(level3) + "<include refid=\"" + DYNAMIC_SQL_ID + "\" />\n");
		sb.append(indent(level3) + "<if test=\"end != null\">\n");
		sb.append(indent(level4) + "and rownum  &lt; #{end,jdbcType=DECIMAL}\n");
		sb.append(indent(level3) + "</if> \n");
		sb.append(indent(level2) + "</where> \n");
		sb.append(indent(level2) + ") a\n ");
		sb.append(indent(level1) + "<where>\n");
		sb.append(indent(level2) + "<if test=\"start != null\">\n");
		sb.append(indent(level3) + " rnum &gt;= #{start,jdbcType=DECIMAL} \n");
		sb.append(indent(level2) + "</if>\n");
		sb.append(indent(level1) + "</where>");

		TextElement text = new TextElement(sb.toString());
		element.addElement(text);

		document.getRootElement().addElement(element);
	}



}
