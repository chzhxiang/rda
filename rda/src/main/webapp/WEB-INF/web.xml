<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
	<!-- 支持Servlet 3 异步请求 -->

	<display-name>rda</display-name>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/spring-context.xml</param-value>
	</context-param>
	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>dev</param-value>
	</context-param>

	<distributable />

	<!-- Enforce UTF-8 Character Encoding -->
	<filter>
		<filter-name>charEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>charEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
		<async-supported>true</async-supported>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<servlet-name>dispatcherServlet</servlet-name>
	</filter-mapping>

	<!-- 支持HTTP1.1的Etag标签,若无此需求可remove -->
	<filter>
		<filter-name>etagFilter</filter-name>
		<filter-class>org.springframework.web.filter.ShallowEtagHeaderFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>etagFilter</filter-name>
		<servlet-name>dispatcherServlet</servlet-name>
	</filter-mapping>

	<!--
		将content-type为appliaction/x-www-form-urlencoded的HTTP PUT,PATCH请求包装为HTTP POST请求;
		PUT,PATCH请求可以通过Non-browser clients提交表单，而Browser clients一般不会。
	-->
	<filter>
		<filter-name>httpPutFormFilter</filter-name>
		<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
		<async-supported>true</async-supported>
	</filter>
	<filter-mapping>
		<filter-name>httpPutFormFilter</filter-name>
		<servlet-name>dispatcherServlet</servlet-name>
	</filter-mapping>

	<!-- CAS单点登出filter,需放在shiroFilter前面  -->
	<filter>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 必须在HiddenHttpMethodFilter之后运行，否则对HTTP的PUT和DELETE方法将拦截不到 -->
	<!-- Spring Security -->
	<!-- <filter> -->
	<!-- <filter-name>springSecurityFilterChain</filter-name> -->
	<!-- <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> -->
	<!-- </filter> -->
	<!-- <filter-mapping> -->
	<!-- <filter-name>springSecurityFilterChain</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->

	<!-- app security with shiro -->
	<!-- The filter-name matches name of a 'shiroFilter' bean inside spring-shiro.xml -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- Make sure any request you want accessible to Shiro is filtered. catches all -->
	<!-- requests. Usually this filter mapping is defined first (before all others) to -->
	<!-- ensure that Shiro works in subsequent filters in the filter chain: -->
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>




	<!-- 必须在springSecurityFilterChain之后运行，否则无法取到用户名 -->
	<!-- <filter> -->
	<!-- <filter-name>MDCInsertingServletFilter</filter-name> -->
	<!-- <filter-class>org.soofa.web.base.filter.MDCInsertingServletFilter</filter-class> -->
	<!-- </filter> -->
	<!-- <filter-mapping> -->
	<!-- <filter-name>MDCInsertingServletFilter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->

	<!-- Loads the Spring web application context -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 用于将WEB应用中,将初始化成功的Spring ApplicationContext的引用保存在一个全局可获得的静态引用中 -->
	<!-- <listener> -->
	<!-- <listener-class>org.soofa.web.base.listener.SpringContextHolder</listener-class> -->
	<!-- </listener> -->

	<!-- 让Spring Security获得session生存周期事件,若不使用SessionManagementFilter可不需要此listener -->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>

	<!--for CAS. Ensures that when an HttpSession expires, the mapping used for single logout is removed. -->
	<listener>
		<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	</listener>

	<!-- Serves static resource content -->
	<!-- <servlet-mapping> -->
	<!-- <servlet-name>default</servlet-name> -->
	<!-- <url-pattern>*.jpg</url-pattern> -->
	<!-- </servlet-mapping> -->
	<!-- <servlet-mapping> -->
	<!-- <servlet-name>default</servlet-name> -->
	<!-- <url-pattern>*.js</url-pattern> -->
	<!-- </servlet-mapping> -->
	<!-- <servlet-mapping> -->
	<!-- <servlet-name>default</servlet-name> -->
	<!-- <url-pattern>*.css</url-pattern> -->
	<!-- </servlet-mapping> -->
	<!-- The front controller of this Spring Web application, responsible for handling all application requests -->
	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:/spring-web.xml</param-value>
		</init-param>
		<init-param>
			<param-name>spring.profiles.active</param-name>
			<param-value>dev</param-value>
		</init-param>
		<async-supported>true</async-supported>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<error-page>
		<location>/WEB-INF/views/error</location>
	</error-page>
</web-app>
